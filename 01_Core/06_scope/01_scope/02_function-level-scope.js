// 함수 레벨 스코프
/* 
var 키워드로 선언된 변수는 오로지 함수의 코드 블록(몸체)만을
지역 스코프로 인정하는 함수 레벨 스코프를 가진다.
 */

// 전역변수
var i = 0;

// 전역변수로 선언된 i에 중복 선언된다.
for(var i = 0; i < 10; i++){
    
}

/*
스코프 체인
전역 스코프 (x, y, outer) <- outer 지역 스코프 (z, inner) <- inner 지역 스코프(x)
모든 스코프는 하나의 계층적 구조로 연결되며, 모든 지역 스코프의 최상위 스코프는 전역 스코프이다.
변수를 참조할 때 자바스크립트 엔진은 스코프 체인을 통해 변수를 참조하는 코드의 스코프에서 시작하여
상위 스코프 방향으로 이동하며 선언된 변수를 검색한다. 
따라서 상위 스코프에서 유효한 변수는 하위 스코프에서 자유롭게 참조할 수 있지만
하위 스코프에서 유효한 변수를 상위 스코프에서는 참조할 수 없다.
*/

// 다 대문자로, 두 개의 단어를 _로 연결
const DISCOUNT_RATE = 0.15;

// 정가
let price = 15000;

// 할인가
let discountprice = price * (1 - DISCOUNT_RATE);
console.log(discountprice);

console.log('---------------');

// const 키워드로 선언된 변수에 객체를 할당했을 경우 값을 변경할 수 있다.
const student = {
    name : '홍길동',
    age : 20,
};

student.name = '유관순';
console.log(student);

// student = {}; 객체 자체를 재할당 하는 건 안 됨.

/* ES6를 사용한다면 var 키워드는 사용하지 않는다.
재할당이 필용한 경우에 한정해 let 키워드를 사용하며 변수의 스코프는 최대한 좁게 만든다.
변경이 발생하지 않고 읽기 전용으로 사용하는 원시 값과 객체에는 const 키워드를 사용한다.
const 키워드는 재할당을 금지하므로 var, let 키워드보다 안전한다.
*/

/* 참고 - 전역 변수의 문제점
1. 모든 코드가 전역 변수를 참조하고 변경할 수 있는 "암묵적 결합"을 허용한다.
변수의 유효 범위가 크면 클수록 코드의 가독성은 나빠지고 의도치 않게 상태가 변경될 수 있는 위험성도 높아진다.
2. 전역 변수는 "생명주기가 길다". 메모리 리소스도 오래 소비하며, 상태 변경이 가능한 시간 및 기회가 많다.
더욱이 중복 된 변수명을 통해 의도치 않은 재할당이 일어날 수도 있다.
3. "스코프 체인 상에서 종점에 존재"하므로 전역 변수의 검색속도가 가장 느리다.
4. "네임스페이스가 오염"된다. 자바스크립트는 파일이 분리 되어 있어도 하나의 전역 스코프를 공유하므로 예상치 못한 결과를 가져올 수 있다.
=> 변수의 스코프는 좁을수록 좋다.
 */
